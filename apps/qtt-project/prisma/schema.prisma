// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Data {
  tg_link                 String   @default("")
  current_bonus           Float    @default(154.4)
  ranger_value            Int      @default(1000)
  bonus_end_time          DateTime @default(now())
  tokens_allocate_public  Int      @default(45)
  tokens_allocate_private Int      @default(25)
  team_and_founder        Int      @default(45)
  advisors_and_partners   Int      @default(4)
  bounty_and_events       Int      @default(45)
  reserve_fund            Int      @default(45)
  start_time              DateTime @default(now())
  end_time                DateTime @default(now())
  token_symbol            String   @default("QTT")
  token_offered           Float    @default(15.0)
  hard_cap                Float    @default(12.0)
  soft_cap                Float    @default(2.0)
  crowdsale_1             Float    @default(1.5)
  crowdsale_2             Float    @default(2.5)
  roadmap_time            Float    @default(1000)

  @@unique([current_bonus, bonus_end_time, tokens_allocate_public, tokens_allocate_private, team_and_founder, advisors_and_partners, bounty_and_events, reserve_fund, start_time, end_time, token_symbol, token_offered, hard_cap, soft_cap, crowdsale_1, crowdsale_2, roadmap_time])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
